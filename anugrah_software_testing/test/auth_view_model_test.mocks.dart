// Mocks generated by Mockito 5.4.6 from annotations
// in anugrah_software_testing/test/auth_view_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:anugrah_software_testing/model/authService.dart' as _i3;
import 'package:anugrah_software_testing/model/user.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUser_0 extends _i1.SmartFake implements _i2.User {
  _FakeUser_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i3.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.User> login({
    required String? username,
    required String? password,
    int? expiresInMins = 30,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#login, [], {
              #username: username,
              #password: password,
              #expiresInMins: expiresInMins,
            }),
            returnValue: _i4.Future<_i2.User>.value(
              _FakeUser_0(
                this,
                Invocation.method(#login, [], {
                  #username: username,
                  #password: password,
                  #expiresInMins: expiresInMins,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.User>);

  @override
  _i4.Future<_i2.User> getCurrentUser() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentUser, []),
            returnValue: _i4.Future<_i2.User>.value(
              _FakeUser_0(this, Invocation.method(#getCurrentUser, [])),
            ),
          )
          as _i4.Future<_i2.User>);

  @override
  _i4.Future<_i2.User> refreshToken({int? expiresInMins = 30}) =>
      (super.noSuchMethod(
            Invocation.method(#refreshToken, [], {
              #expiresInMins: expiresInMins,
            }),
            returnValue: _i4.Future<_i2.User>.value(
              _FakeUser_0(
                this,
                Invocation.method(#refreshToken, [], {
                  #expiresInMins: expiresInMins,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.User>);

  @override
  _i4.Future<void> logout() =>
      (super.noSuchMethod(
            Invocation.method(#logout, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
